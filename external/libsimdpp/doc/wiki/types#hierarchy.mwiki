{{title|Type hierarchy}}
{{types/navbar}}

The main vector types described [[types/main|here]] form type hierarchy by inheriting from empty class template using [https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern curriously recurring template pattern]. This allows to write function templates accepting a certain category of vector types as parameters without needing to create excessive number of overloads. For example, it's possible to write a single function template that, for example, accepts any two integer vectors with 32-bit elements.

The type hierarchy is shown below:
{{source|1=
any_vec
┣━ any_vec8
┃   ┗━ any_int8
┃        ┣━ int8 
┃        ┣━ uint8
┃        ┗━ mask_int8
┣━ any_vec16
┃   ┗━ any_int16
┃        ┣━ int16
┃        ┣━ uint16
┃        ┗━ mask_int16
┣━ any_vec32
┃   ┣━ any_int32
┃   ┃    ┣━ int32
┃   ┃    ┣━ uint32
┃   ┃    ┗━ mask_int32
┃   ┗━ any_float32
┃        ┣━ float32
┃        ┗━ mask_float32
┗━ any_vec64
    ┣━ any_int64
    ┃    ┣━ int64
    ┃    ┣━ uint64
    ┃    ┗━ mask_int64
    ┗━ any_float64
         ┣━ float64
         ┗━ mask_float64
}}

The categorization types are only useful as parameters in functions that a certain vector category. They are never used in other contexts.